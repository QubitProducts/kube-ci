// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package kubeci

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KubeCIClient is the client API for KubeCI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KubeCIClient interface {
	ListTemplate(ctx context.Context, in *ListTemplatesRequest, opts ...grpc.CallOption) (*ListTemplatesResponse, error)
	SetupRepo(ctx context.Context, in *SetupRepoRequest, opts ...grpc.CallOption) (*SetupRepoResponse, error)
}

type kubeCIClient struct {
	cc grpc.ClientConnInterface
}

func NewKubeCIClient(cc grpc.ClientConnInterface) KubeCIClient {
	return &kubeCIClient{cc}
}

func (c *kubeCIClient) ListTemplate(ctx context.Context, in *ListTemplatesRequest, opts ...grpc.CallOption) (*ListTemplatesResponse, error) {
	out := new(ListTemplatesResponse)
	err := c.cc.Invoke(ctx, "/kubeci.KubeCI/ListTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeCIClient) SetupRepo(ctx context.Context, in *SetupRepoRequest, opts ...grpc.CallOption) (*SetupRepoResponse, error) {
	out := new(SetupRepoResponse)
	err := c.cc.Invoke(ctx, "/kubeci.KubeCI/SetupRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KubeCIServer is the server API for KubeCI service.
// All implementations must embed UnimplementedKubeCIServer
// for forward compatibility
type KubeCIServer interface {
	ListTemplate(context.Context, *ListTemplatesRequest) (*ListTemplatesResponse, error)
	SetupRepo(context.Context, *SetupRepoRequest) (*SetupRepoResponse, error)
	mustEmbedUnimplementedKubeCIServer()
}

// UnimplementedKubeCIServer must be embedded to have forward compatible implementations.
type UnimplementedKubeCIServer struct {
}

func (UnimplementedKubeCIServer) ListTemplate(context.Context, *ListTemplatesRequest) (*ListTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplate not implemented")
}
func (UnimplementedKubeCIServer) SetupRepo(context.Context, *SetupRepoRequest) (*SetupRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupRepo not implemented")
}
func (UnimplementedKubeCIServer) mustEmbedUnimplementedKubeCIServer() {}

// UnsafeKubeCIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KubeCIServer will
// result in compilation errors.
type UnsafeKubeCIServer interface {
	mustEmbedUnimplementedKubeCIServer()
}

func RegisterKubeCIServer(s grpc.ServiceRegistrar, srv KubeCIServer) {
	s.RegisterService(&KubeCI_ServiceDesc, srv)
}

func _KubeCI_ListTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeCIServer).ListTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubeci.KubeCI/ListTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeCIServer).ListTemplate(ctx, req.(*ListTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeCI_SetupRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeCIServer).SetupRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubeci.KubeCI/SetupRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeCIServer).SetupRepo(ctx, req.(*SetupRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KubeCI_ServiceDesc is the grpc.ServiceDesc for KubeCI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KubeCI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kubeci.KubeCI",
	HandlerType: (*KubeCIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTemplate",
			Handler:    _KubeCI_ListTemplate_Handler,
		},
		{
			MethodName: "SetupRepo",
			Handler:    _KubeCI_SetupRepo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kubeci.proto",
}
