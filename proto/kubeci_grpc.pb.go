// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package kubecipb

import (
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CIRunnerClient is the client API for CIRunner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CIRunnerClient interface {
}

type cIRunnerClient struct {
	cc grpc.ClientConnInterface
}

func NewCIRunnerClient(cc grpc.ClientConnInterface) CIRunnerClient {
	return &cIRunnerClient{cc}
}

// CIRunnerServer is the server API for CIRunner service.
// All implementations must embed UnimplementedCIRunnerServer
// for forward compatibility
type CIRunnerServer interface {
	mustEmbedUnimplementedCIRunnerServer()
}

// UnimplementedCIRunnerServer must be embedded to have forward compatible implementations.
type UnimplementedCIRunnerServer struct {
}

func (UnimplementedCIRunnerServer) mustEmbedUnimplementedCIRunnerServer() {}

// UnsafeCIRunnerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CIRunnerServer will
// result in compilation errors.
type UnsafeCIRunnerServer interface {
	mustEmbedUnimplementedCIRunnerServer()
}

func RegisterCIRunnerServer(s grpc.ServiceRegistrar, srv CIRunnerServer) {
	s.RegisterService(&CIRunner_ServiceDesc, srv)
}

// CIRunner_ServiceDesc is the grpc.ServiceDesc for CIRunner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CIRunner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kubecipb.CIRunner",
	HandlerType: (*CIRunnerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "kubeci.proto",
}
